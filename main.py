# -*- coding: utf-8 -*-
"""Untitled

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V7MdftcScOuh_RfRoP_52YK08RYkDdV4
"""

import streamlit as st
import random
import re
from collections import Counter

class AssignmentQuizGenerator:
    def __init__(self):
        self.question_starters = [
            "What", "How", "Why", "When", "Where", "Who", "Which", "Describe", "Explain", "Analyze"
        ]

        self.essay_prompts = [
            "Analyze the main concepts presented in the text and their relationships.",
            "Discuss the key arguments and provide your critical evaluation.",
            "Compare and contrast the different viewpoints mentioned in the document.",
            "Examine the causes and effects described in the material.",
            "Evaluate the significance and implications of the main ideas presented."
        ]

    def extract_key_phrases(self, text):
        """Extract important phrases and concepts from the text"""
        # Remove common stop words
        stop_words = {'the', 'a', 'an', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by', 'is', 'are', 'was', 'were', 'be', 'been', 'being', 'have', 'has', 'had', 'do', 'does', 'did', 'will', 'would', 'could', 'should', 'may', 'might', 'can', 'this', 'that', 'these', 'those'}

        # Split into sentences and clean
        sentences = re.split(r'[.!?]+', text)
        sentences = [s.strip() for s in sentences if len(s.strip()) > 10]

        # Extract key words (capitalized words, longer words)
        words = re.findall(r'\b[A-Za-z]+\b', text.lower())
        key_words = [word for word in words if len(word) > 4 and word not in stop_words]

        # Get most common key words
        word_freq = Counter(key_words)
        important_words = [word for word, freq in word_freq.most_common(20)]

        # Extract noun phrases (simple approach)
        noun_phrases = re.findall(r'\b[A-Z][a-z]+(?:\s+[A-Z][a-z]+)*\b', text)

        return {
            'sentences': sentences,
            'key_words': important_words,
            'noun_phrases': noun_phrases
        }

    def generate_assignments(self, text, topic=""):
        """Generate 2 assignment questions"""
        key_data = self.extract_key_phrases(text)

        assignments = []

        # Assignment 1: Topic-specific analysis
        if topic:
            assignment1 = f"Write a comprehensive analysis of {topic}. " + random.choice([
                "Discuss its main components, significance, and real-world applications.",
                "Examine its historical development and current relevance.",
                "Analyze its key characteristics and provide examples."
            ])
        else:
            # Use key phrases from text
            if key_data['noun_phrases']:
                main_concept = random.choice(key_data['noun_phrases'][:5])
                assignment1 = f"Write a detailed essay analyzing {main_concept}. Discuss its importance and provide specific examples from the text."
            else:
                assignment1 = "Write a comprehensive analysis of the main concepts presented in the document. Discuss their significance and interconnections."

        assignments.append(assignment1)

        # Assignment 2: Critical thinking
        if len(key_data['key_words']) >= 2:
            word1, word2 = random.sample(key_data['key_words'][:10], 2)
            assignment2 = f"Compare and contrast the concepts of {word1} and {word2} as presented in the material. Provide arguments for their similarities and differences."
        else:
            assignment2 = random.choice(self.essay_prompts)

        assignments.append(assignment2)

        return assignments

    def generate_quiz_questions(self, text, topic=""):
        """Generate 3 multiple choice questions"""
        key_data = self.extract_key_phrases(text)
        questions = []

        # Question 1: Definition/concept based
        if key_data['key_words']:
            key_word = random.choice(key_data['key_words'][:5])
            question1 = {
                'question': f"According to the text, what is the primary significance of {key_word}?",
                'options': [
                    f"It represents the main theme of {topic if topic else 'the document'}",
                    f"It is a supporting detail that enhances understanding",
                    f"It serves as an example of broader concepts",
                    f"It provides context for historical development"
                ],
                'correct': 0
            }
        else:
            question1 = {
                'question': f"What is the main focus of {'the topic ' + topic if topic else 'the document'}?",
                'options': [
                    "Primary concepts and their applications",
                    "Historical background information",
                    "Supporting examples and details",
                    "Statistical data and figures"
                ],
                'correct': 0
            }

        questions.append(question1)

        # Question 2: Analysis based
        if len(key_data['sentences']) >= 2:
            sentence = random.choice(key_data['sentences'][:3])
            # Extract a key phrase from the sentence
            words_in_sentence = sentence.split()
            if len(words_in_sentence) > 5:
                question2 = {
                    'question': f"Based on the statement '{sentence[:60]}...', what can be inferred?",
                    'options': [
                        "It supports the main argument presented",
                        "It contradicts previous statements",
                        "It provides irrelevant information",
                        "It introduces a new unrelated topic"
                    ],
                    'correct': 0
                }
            else:
                question2 = {
                    'question': "Which statement best describes the document's approach?",
                    'options': [
                        "Analytical and comprehensive",
                        "Purely descriptive",
                        "Highly technical",
                        "Overly simplified"
                    ],
                    'correct': 0
                }
        else:
            question2 = {
                'question': "What method does the text use to present information?",
                'options': [
                    "Structured explanation with examples",
                    "Random listing of facts",
                    "Chronological timeline",
                    "Question and answer format"
                ],
                'correct': 0
            }

        questions.append(question2)

        # Question 3: Application/synthesis
        if topic:
            question3 = {
                'question': f"How might the concepts related to {topic} be applied in practice?",
                'options': [
                    "Through systematic implementation and monitoring",
                    "By ignoring theoretical foundations",
                    "Using only traditional methods",
                    "Without considering context or environment"
                ],
                'correct': 0
            }
        else:
            question3 = {
                'question': "What would be the best way to apply the knowledge from this document?",
                'options': [
                    "Integrate the concepts into practical scenarios",
                    "Memorize all details without understanding",
                    "Focus only on specific examples",
                    "Ignore the broader implications"
                ],
                'correct': 0
            }

        questions.append(question3)

        # Randomize option order for each question while keeping track of correct answer
        for q in questions:
            correct_answer = q['options'][q['correct']]
            random.shuffle(q['options'])
            q['correct'] = q['options'].index(correct_answer)

        return questions

def main():
    st.set_page_config(
        page_title="Assignment & Quiz Generator",
        page_icon="📚",
        layout="wide"
    )

    st.title("📚 Assignment & Quiz Generator")
    st.markdown("Generate assignments and quiz questions from any document or topic!")

    # Initialize generator
    generator = AssignmentQuizGenerator()

    # Sidebar for input options
    st.sidebar.header("Input Options")
    input_type = st.sidebar.radio("Choose input method:", ["Enter Text", "Enter Topic Only"])

    if input_type == "Enter Text":
        # Text input
        st.subheader("📄 Document Input")
        input_text = st.text_area(
            "Paste your document or text here:",
            height=200,
            placeholder="Enter the text you want to generate assignments and quizzes from..."
        )
        topic = st.text_input("Topic (optional):", placeholder="e.g., Machine Learning, History of Rome, etc.")
    else:
        # Topic only
        st.subheader("🎯 Topic Input")
        topic = st.text_input("Enter your topic:", placeholder="e.g., Photosynthesis, World War II, Python Programming")
        input_text = f"This document discusses {topic} and its various aspects, applications, and significance in the field."

    # Generate button
    if st.button("🚀 Generate Assignments & Quiz", type="primary"):
        if input_text.strip():
            with st.spinner("Generating assignments and quiz questions..."):
                # Generate assignments
                assignments = generator.generate_assignments(input_text, topic)

                # Generate quiz questions
                quiz_questions = generator.generate_quiz_questions(input_text, topic)

                # Display results
                st.success("Generated successfully!")

                # Display assignments
                st.header("📝 Assignment Questions")
                for i, assignment in enumerate(assignments, 1):
                    st.subheader(f"Assignment {i}")
                    st.write(assignment)
                    st.markdown("---")

                # Display quiz
                st.header("❓ Quiz Questions")

                # Store quiz state
                if 'quiz_answers' not in st.session_state:
                    st.session_state.quiz_answers = {}

                for i, q in enumerate(quiz_questions):
                    st.subheader(f"Question {i+1}")
                    st.write(q['question'])

                    # Radio buttons for options
                    answer = st.radio(
                        f"Select your answer for Question {i+1}:",
                        q['options'],
                        key=f"q{i}",
                        index=None
                    )

                    if answer:
                        st.session_state.quiz_answers[i] = q['options'].index(answer)

                    st.markdown("---")

                # Show results button
                if st.button("Show Quiz Results"):
                    if len(st.session_state.quiz_answers) == len(quiz_questions):
                        score = 0
                        st.subheader("📊 Quiz Results")

                        for i, q in enumerate(quiz_questions):
                            user_answer = st.session_state.quiz_answers.get(i, -1)
                            is_correct = user_answer == q['correct']

                            if is_correct:
                                score += 1
                                st.success(f"Question {i+1}: Correct! ✅")
                            else:
                                st.error(f"Question {i+1}: Incorrect ❌")
                                st.write(f"Correct answer: {q['options'][q['correct']]}")

                        percentage = (score / len(quiz_questions)) * 100
                        st.metric("Final Score", f"{score}/{len(quiz_questions)}", f"{percentage:.1f}%")

                        # Clear answers for retry
                        if st.button("Reset Quiz"):
                            st.session_state.quiz_answers = {}
                            st.experimental_rerun()
                    else:
                        st.warning("Please answer all questions before viewing results.")

        else:
            st.error("Please enter some text or topic to generate assignments and quiz questions.")

    # Instructions
    with st.expander("ℹ️ How to use"):
        st.markdown("""
        ### Instructions:
        1. **Enter Text**: Paste any document, article, or educational content
        2. **Or Enter Topic**: Just provide a topic name for general questions
        3. **Add Topic (Optional)**: Specify the main topic for more focused questions
        4. **Click Generate**: The system will create 2 assignment questions and 3 quiz questions
        5. **Take the Quiz**: Answer the multiple choice questions and check your results

        ### Features:
        - **Smart Text Analysis**: Extracts key concepts and important phrases
        - **Contextual Questions**: Generates relevant questions based on content
        - **Interactive Quiz**: Multiple choice questions with instant feedback
        - **Assignment Prompts**: Essay-style questions for deeper learning
        """)

if __name__ == "__main__":
    main()

